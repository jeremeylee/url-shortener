{"version":3,"sources":["services/shorten.js","App.js","serviceWorker.js","index.js"],"names":["shortenUrl","url","a","axios","post","response","data","Title","Typography","App","Paragraph","props","useState","input","setInput","setShortenUrl","handleSubmit","event","preventDefault","UrlToShorten","shortenService","console","log","className","type","justify","onSubmit","level","xs","sm","md","lg","xl","onChange","target","value","placeholder","span","htmlType","size","shortenLink","window","location","href","concat","copyable","displayShortenUrl","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAOe,GAAEA,WALD,sCAAG,WAAOC,GAAP,eAAAC,EAAA,qEACMC,IAAMC,KAAK,oBAAqBH,GADtC,cACXI,EADW,yBAEVA,EAASC,MAFC,yCAAH,uD,qDCGRC,EAAqBC,IAArBD,MAqDOE,GArDcD,IAAdE,UAEH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAEeF,mBAAS,IAFxB,mBAEdZ,EAFc,KAEFe,EAFE,KAIfC,EAAY,sCAAG,WAAOC,GAAP,iBAAAf,EAAA,4DACnBe,EAAMC,iBACAC,EAAe,CACnBlB,IAAKY,GAHY,SAMIO,EAAepB,WAAWmB,GAN9B,OAMbd,EANa,OAOnBgB,QAAQC,IAAIjB,GACZU,EAAcV,EAASL,YACvBqB,QAAQC,IAAItB,GACZc,EAAS,IAVU,yCAAH,sDAwBlB,OACE,yBAAKS,UAAU,aACb,kBAAC,IAAD,CAAKC,KAAK,OAAOC,QAAQ,UACvB,kBAAClB,EAAD,uBAEA,0BAAMmB,SAAUV,EAAcO,UAAU,kBACtC,kBAAC,IAAD,CAAKC,KAAK,OAAOC,QAAQ,UACvB,kBAAClB,EAAD,CAAOoB,MAAO,GAAd,gCAEF,kBAAC,IAAD,CAAKH,KAAK,OAAOC,QAAQ,UACvB,kBAAC,IAAD,CAAKG,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IACpC,kBAAC,IAAD,CAAOC,SAAU,SAAAhB,GAAK,OAAIH,EAASG,EAAMiB,OAAOC,QAAQC,YAAY,wBAAwBD,MAAOtB,EAAOU,UAAU,gBAEtH,kBAAC,IAAD,CAAKc,KAAM,GACT,kBAAC,IAAD,CAAQC,SAAS,SAASd,KAAK,UAAUe,KAAK,SAA9C,eAIPvC,EA5BqB,WACxB,IACMwC,EADOC,OAAOC,SAASC,KACJC,OAAO5C,GAChC,OACE,kBAAC,IAAD,CAAKwB,KAAK,OAAOC,QAAQ,SAASF,UAAU,yBACxC,kBAAChB,EAAD,CAAOoB,MAAO,EAAGkB,UAAQ,GAAGL,IAuBlBM,GAAsB,iCCzCtBC,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e2fd4b71.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst shortenUrl = async (url) => {\n  const response = await axios.post('/api/urlShortener', url);\n  return response.data;\n}\n\nexport default { shortenUrl };\n","import React, { useState } from 'react';\nimport shortenService from './services/shorten';\nimport './App.css';\nimport { Row, Col, Typography, Input, Button, Icon } from 'antd';\n\nconst { Title, Paragraph } = Typography;\n\nconst App = (props) => {\n  const [input, setInput] = useState('');\n  const [shortenUrl, setShortenUrl] = useState('');\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const UrlToShorten = {\n      url: input,\n    }\n\n    const response = await shortenService.shortenUrl(UrlToShorten);\n    console.log(response);\n    setShortenUrl(response.shortenUrl);\n    console.log(shortenUrl);\n    setInput('');\n    \n  }\n  \n  const displayShortenUrl = () => {\n    const host = window.location.href;\n    const shortenLink = host.concat(shortenUrl)\n    return (\n      <Row type=\"flex\" justify=\"center\" className=\"shorten-url-container\">\n          <Title level={3} copyable >{shortenLink}</Title>\n      </Row>\n    )\n  }\n\n  return (\n    <div className=\"container\">\n      <Row type=\"flex\" justify=\"center\">\n        <Title>Url Shortener</Title>\n      </Row> \n        <form onSubmit={handleSubmit} className=\"form-container\">\n          <Row type=\"flex\" justify=\"center\">\n            <Title level={2}>Paste a URL to shorten it: </Title>\n          </Row>\n          <Row type=\"flex\" justify=\"center\">\n            <Col xs={4} sm={6} md={8} lg={10} xl={12}>\n              <Input onChange={event => setInput(event.target.value)} placeholder=\"http://www.google.com\" value={input} className=\"input-form\"/>\n            </Col>\n            <Col span={2}>\n              <Button htmlType=\"submit\" type=\"primary\" size=\"large\">Shorten!</Button>\n            </Col>\n          </Row>\n      </form>\n      {shortenUrl ? displayShortenUrl() : <div></div>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}